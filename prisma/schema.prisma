generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password_hash String
  created_at    DateTime      @default(now())
  birth_date    DateTime?
  phone_number  String?
  profile_img   String?
  updated_at    DateTime      @updatedAt
  Comment       Comment?
  conversations Conversation?
  posts         Post[]

  @@map("users")
}

model Conversation {
  id       String    @id @default(cuid())
  user_id  String    @unique
  user     User      @relation(fields: [user_id], references: [id])
  messages Message[]

  @@map("conversations")
}

model Message {
  id              String       @id @default(cuid())
  content         String
  sent_by_user    Boolean
  timestamp       DateTime     @default(now())
  conversation_id String
  publishable     Boolean
  conversation    Conversation @relation(fields: [conversation_id], references: [id])

  @@map("messages")
}

model Post {
  id         String    @id @default(cuid())
  content    String
  likes      Int
  author_id  String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  comments   Comment[]
  author     User      @relation(fields: [author_id], references: [id])

  @@map("posts")
}

model Comment {
  id               String        @id @default(cuid())
  content          String
  likes            Int
  author_id        String        @unique
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  post_id          String?
  article_id       String?
  video_content_id String?
  audio_content_id String?
  articles         Article?      @relation(fields: [article_id], references: [id])
  audio_contents   AudioContent? @relation(fields: [audio_content_id], references: [id])
  author           User          @relation(fields: [author_id], references: [id])
  post             Post?         @relation(fields: [post_id], references: [id])
  video_contents   VideoContent? @relation(fields: [video_content_id], references: [id])

  @@map("comments")
}

model Article {
  id          String          @id @default(cuid())
  author_name String
  content     String
  title       String
  likes       Int
  category    ArticleCategory
  cover_img   String
  created_at  DateTime        @default(now())
  article_url String
  comments    Comment[]

  @@map("articles")
}

model VideoContent {
  id          String          @id @default(cuid())
  category    ContentCategory
  video_url   String
  cover_img   String
  likes       Int
  title       String
  description String
  comments    Comment[]

  @@map("video_contents")
}

model AudioContent {
  id          String          @id @default(cuid())
  category    ContentCategory
  audio_url   String
  cover_img   String
  likes       Int
  title       String
  description String?
  comments    Comment[]

  @@map("audio_contents")
}

enum ArticleCategory {
  Tips
  Informative
  Curiosity
}

enum ContentCategory {
  Focus
  Relaxing
  Enterteniment
}
